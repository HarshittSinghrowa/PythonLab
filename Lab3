Q-1) WAP to check if a given number is a disarium number
  n = int(input("Enter a number: "))
  num_str = str(n)
  sum_of_powers = sum(int(digit) ** (i + 1) for i, digit in enumerate(num_str))
  
  if sum_of_powers == n:
      print(f"{n} is a Disarium number.")
  else:
      print(f"{n} is not a Disarium number.")

Q-2) WAP to determine wether the given number is a Harshad Number
  n = int(input("Enter a number: "))
  sum_of_digits = sum(int(digit) for digit in str(n))
  
  if n % sum_of_digits == 0:
      print(f"{n} is a Harshad number.")
  else:
      print(f"{n} is not a Harshad number.")

Q-3) WAP to print armstrong number form 1 to 1000
  for n in range(1, 1001):
      num_str = str(n)
      num_digits = len(num_str)
      sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)
  
      if sum_of_powers == n:
          print(n)

Q-4) WAP to compute the value of Xn
  x = int(input("Enter the base (X): "))
  n = int(input("Enter the exponent (n): "))
  result = 1
  
  for _ in range(n):
      result *= x
  
  print(f"{x}^{n} = {result}")

Q-5) WAP to calculate the value of nCr
  def factorial(num):
      result = 1
      for i in range(1, num + 1):
          result *= i
      return result
  
  n = int(input("Enter n: "))
  r = int(input("Enter r: "))
  nCr = factorial(n) // (factorial(r) * factorial(n - r))
  
  print(f"{n}C{r} = {nCr}")

Q-6) WAP to count the sum of digits in the enetred number
  n = int(input("Enter a number: "))
  sum_of_digits = sum(int(digit) for digit in str(n))
  
  print(f"Sum of digits in {n} is: {sum_of_digits}")
